-- DATABASE OPERATIONS
-- Create database (with check to avoid errors)
CREATE DATABASE IF NOT EXISTS college;
CREATE DATABASE IF NOT EXISTS xyz;

-- Delete database
DROP DATABASE IF EXISTS college;
DROP DATABASE IF EXISTS xyz;

-- Switch to a database
USE college;

-- Show available databases
SHOW DATABASES;

-- Show tables in current database
SHOW TABLES;


-- TABLE OPERATIONS
-- Create table with primary key
CREATE TABLE IF NOT EXISTS student (
    rollno INT PRIMARY KEY,
    name VARCHAR(50),
    marks INT NOT NULL,
    grade VARCHAR(1),
    city VARCHAR(20)
);

-- Create another table example
CREATE TABLE IF NOT EXISTS emp (
    id INT PRIMARY KEY,
    name VARCHAR(50),
    salary INT
);


-- DATA MANIPULATION
-- Insert data (multiple formats)
INSERT INTO student VALUES (101, 'Alok', 44, 'C', 'Pune');
INSERT INTO student (rollno, name, marks, grade, city) 
VALUES (102, 'Blok', 22, 'D', 'Wune');

-- Bulk insert
INSERT INTO emp (id, name, salary) VALUES
    (1, "adam", 25000),
    (2, "bob", 30000),
    (3, "casey", 40000);


-- BASIC QUERIES
-- Select all data
SELECT * FROM student;

-- Select specific columns
SELECT name, marks FROM student;

-- Select distinct values
SELECT DISTINCT city FROM student;


-- CONDITIONAL QUERIES
-- Where clause
SELECT * FROM student WHERE marks < 23;
SELECT * FROM student WHERE city = "Pune";

-- AND/OR operators
SELECT * FROM student WHERE marks > 40 AND city = "Pune";
SELECT * FROM student WHERE marks > 40 OR city = "Pune";

-- BETWEEN operator
SELECT * FROM student WHERE marks BETWEEN 80 AND 90;

-- IN operator
SELECT * FROM student WHERE city IN("Pune", "Mumbai");

-- NOT operator
SELECT * FROM student WHERE city NOT IN ("Delhi", "Mumbai");


-- DATA AGGREGATION
-- Limit results
SELECT * FROM student LIMIT 3;

-- Order results
SELECT * FROM student ORDER BY city ASC;
SELECT * FROM student ORDER BY marks DESC LIMIT 3;

-- Aggregate functions
SELECT MAX(marks) FROM student;
SELECT MIN(marks) FROM student;
SELECT COUNT(rollno) FROM student;
SELECT AVG(marks) FROM student;


-- GROUP OPERATIONS
-- Group by with count
SELECT city, COUNT(name) FROM student GROUP BY city;

-- Group by with average (ordered)
SELECT city, AVG(marks) 
FROM student 
GROUP BY city 
ORDER BY AVG(marks) DESC;
